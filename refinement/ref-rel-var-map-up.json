{
    "models": { "ILA":"m0" , "VERILOG": "m1" },
  
    "state mapping": {
        "io_valid_out"    : "m1.upstream.io_valid_r_o[0]",
        "io_data_out_ch0" : "m1.upstream.io_data_r_o[7:0]",
        "io_data_out_ch1" : "m1.upstream.io_data_r_o[15:8]",

        "data_cycle_0"    : "#data0#",
        "data_cycle_1"    : "m1.upstream.out_piso.data_o",
        "child_valid"     : "~m1.upstream.out_piso.ready_and_o",
        "sent_cnt"        : "#sent_counter#",
        "finish_cnt"      : [["__START__", "#finish_counter#"],
                            ["__IEND__",  "#finish_cnt_holder#"]]
    },

    "value-holder" : {
        "data0" :{
          "cond": "(__START__ || __STARTED__) && m1.upstream.out_piso.shift_ctr_r == 0",
          "val" : "m1.upstream.out_piso.data_o",
          "width": "auto"
        },

        "finish_cnt_holder":{
            "cond" : "__CYCLE_CNT__ == 1",
            "val" : "#finish_counter#",
            "width" : 7
        }
      },

    "verilog-inline-monitors" : {
        "token_record": {
            "verilog": [
                "always @(posedge __ILA_I_core_clk) begin",
                "   if(rst) token_clk_i <= 0;",
                "   else begin",
                "       token_clk_i <= m1.upstream.token_clk_i[0];",
                "   end",
                "end"
            ],

            "defs" : [
                ["token_clk_i", 1 ,"reg"]
            ],

            "refs" : [

            ]
        },

        "counter_record":{
            "verilog": [
                "assign sent_counter = m1.upstream.ch_0_sso.pos_credit_ctr.r_counter_r[5:0] + m1.upstream.ch_0_sso.neg_credit_ctr.r_counter_r[5:0];",
                "assign finish_counter = {(m1.upstream.ch_0_sso.pos_credit_ctr.w_counter_binary_r_rsync[3:0] + m1.upstream.ch_0_sso.neg_credit_ctr.w_counter_binary_r_rsync[3:0]),3'b000};"
            ],
            "defs" :[
                ["sent_counter", 7, "reg"],
                ["finish_counter", 7, "reg"]
            ],
            "refs" :[
                "m1.upstream.ch_0_sso.pos_credit_ctr.r_counter_r",
                "m1.upstream.ch_0_sso.neg_credit_ctr.r_counter_r",
                "m1.upstream.ch_0_sso.pos_credit_ctr.w_counter_binary_r_rsync",
                "m1.upstream.ch_0_sso.neg_credit_ctr.w_counter_binary_r_rsync"
            ]
        },

        "input_constraints":{
            "verilog":[
                "always @(posedge __ILA_I_core_clk) begin",
                "    if(rst) begin valid_i <= 0; data_i <=0; end",
                "    else",
                "       if(valid_i == 0 || (valid_i == 1 && m1.upstream.core_ready_o) ) begin ",
                "          valid_i <= random_valid; data_i <= random_data; end",
                "end"
            ],
            "defs": [
                ["random_valid", 1, "wire"],
                ["random_data", 64, "wire"],
                ["valid_i", 1 ,"reg"],
                ["data_i", 64 ,"reg"]

            ],
            "refs": [
                "m1.upstream.core_ready_o"
            ]
        }

    },

    "interface mapping": {
        "base_clk"      :      "**KEEP**",
        "core_clk"      :      "core_clk",
        "io_clk"        :      "**CLOCK**",
        "edge_clk_i"    :      "core_clk",
        "rst"           :      "**RESET**",
        "data_i"        :      "core_data_in",
        "valid_i"       :       "core_valid_in",
        "core_yumi_i"   :       "**KEEP**",
        "data_o"        :       "**SO**",
        "valid_o"       :       "**SO**"
    },
  
    "assumptions" : [
        "m1.upstream.core_data_i == #data_i#",
        "m1.upstream.core_valid_i == #valid_i#",
        "m0.io_token == (m1.upstream.token_clk_i[0] ^ #token_clk_i#)"
      ]
  
}